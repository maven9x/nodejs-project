/**
 * @file Tri·ªÉn khai m·ªôt API client m·∫°nh m·∫Ω s·ª≠ d·ª•ng Axios v·ªõi c√°c t√≠nh nƒÉng nh∆∞ interceptors,
 * l√†m m·ªõi token, v√† th·ª≠ l·∫°i y√™u c·∫ßu v·ªõi thu·∫≠t to√°n exponential backoff.
 */

import axios, { AxiosError, AxiosHeaders } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosProgressEvent } from 'axios';
import persistence from '@app/utils/storage';
import { STORAGE_KEYS } from '@app/utils/constants';
import { type IApiClientOptions, type IApiErrorPayload } from '@app/types/api';
import { ApiClientError } from '@app/services/api/apiClientError.service';

/**
 * M·ªôt API client to√†n di·ªán ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n Axios.
 */
class ApiClient {
    private readonly instance: AxiosInstance;
    private readonly options: Required<Omit<IApiClientOptions, 'onUnauthorized' | 'onTokenRefresh'>> &
        Pick<IApiClientOptions, 'onUnauthorized' | 'onTokenRefresh'>;

    private refreshPromise: Promise<string> | null = null;
    private requestInterceptorId?: number;
    private responseInterceptorId?: number;

    /**
     * T·∫°o m·ªôt th·ª±c th·ªÉ c·ªßa ApiClient.
     * @param options - C√°c t√πy ch·ªçn c·∫•u h√¨nh cho client, c√≥ th·ªÉ l√† m·ªôt chu·ªói URL c∆° s·ªü ho·∫∑c m·ªôt ƒë·ªëi t∆∞·ª£ng t√πy ch·ªçn.
     */
    constructor(options: IApiClientOptions | string) {
        const normalizedOptions: IApiClientOptions =
            typeof options === 'string' ? { baseURL: options } : options;

        this.options = {
            timeout: 30_000,
            enableLogging: false,
            retryAttempts: 3,
            retryDelay: 1_000,
            ...normalizedOptions,
        };

        this.instance = axios.create({
            baseURL: this.options.baseURL,
            timeout: this.options.timeout,
            withCredentials: true,
            headers: new AxiosHeaders({ 'Content-Type': 'application/json' }),
        });

        this.setupInterceptors();
    }

    /**
     * Thi·∫øt l·∫≠p c√°c interceptor cho request v√† response c·ªßa Axios.
     */
    private setupInterceptors(): void {
        this.requestInterceptorId = this.instance.interceptors.request.use(
            (config) => {
                const token = persistence.local.getItem(STORAGE_KEYS.AUTH_TOKEN, '');
                if (token) {
                    this.setAuthHeader(config, token);
                }
                if (this.options.enableLogging) {
                    console.log(`üöÄ Y√™u c·∫ßu API: ${config.method?.toUpperCase()} ${config.url}`);
                }
                return config;
            },
            (err: unknown) => {
                if (this.options.enableLogging) console.error('‚ùå L·ªói Y√™u c·∫ßu:', err);
                return Promise.reject(err);
            }
        );

        this.responseInterceptorId = this.instance.interceptors.response.use(
            (response: AxiosResponse) => {
                if (this.options.enableLogging) {
                    console.log(`‚úÖ Ph·∫£n h·ªìi API: ${response.status} ${response.config.url}`);
                }
                return response;
            },
            async (error: AxiosError<IApiErrorPayload>) => {
                if (this.options.enableLogging) {
                    console.error('‚ùå L·ªói Ph·∫£n h·ªìi:', error.config?.url, error.response?.status, error.message);
                }
                // X·ª≠ l√Ω l·ªói 401 Unauthorized ƒë·ªÉ l√†m m·ªõi token
                if (error.response?.status === 401) {
                    return this.handle401Error(error);
                }
                // ƒê·ªëi v·ªõi t·∫•t c·∫£ c√°c l·ªói kh√°c, t·ª´ ch·ªëi v·ªõi m·ªôt ApiClientError ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
                return Promise.reject(this.createApiError(error));
            }
        );
    }

    /**
     * X·ª≠ l√Ω l·ªói 401 Unauthorized, c·ªë g·∫Øng l√†m m·ªõi token n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh.
     * @param error - AxiosError ban ƒë·∫ßu.
     * @returns M·ªôt promise gi·∫£i quy·∫øt v·ªõi m·ªôt AxiosResponse m·ªõi n·∫øu y√™u c·∫ßu c√≥ th·ªÉ ƒë∆∞·ª£c th·ª≠ l·∫°i, ho·∫∑c b·ªã t·ª´ ch·ªëi.
     */
    private async handle401Error(error: AxiosError<IApiErrorPayload>): Promise<AxiosResponse> {
        // N·∫øu c√≥ cung c·∫•p h√†m l√†m m·ªõi token, h√£y th·ª≠ l√†m m·ªõi.
        if (this.options.onTokenRefresh) {
            // S·ª≠ d·ª•ng m·ªôt promise duy nh·∫•t ƒë·ªÉ ngƒÉn ch·∫∑n nhi·ªÅu l·ªánh g·ªçi l√†m m·ªõi ƒë·ªìng th·ªùi.
            if (!this.refreshPromise) {
                this.refreshPromise = this.options.onTokenRefresh();
            }
            try {
                const newToken = await this.refreshPromise;
                persistence.local.setItem(STORAGE_KEYS.AUTH_TOKEN, newToken);
                const originalConfig = error.config;
                if (originalConfig) {
                    this.setAuthHeader(originalConfig, newToken);
                    // Th·ª≠ l·∫°i y√™u c·∫ßu ban ƒë·∫ßu v·ªõi token m·ªõi.
                    return this.instance.request(originalConfig);
                }
            } catch (refreshErr) {
                if (this.options.enableLogging) {
                    console.error('L√†m m·ªõi token th·∫•t b·∫°i:', refreshErr);
                }
                // N·∫øu l√†m m·ªõi th·∫•t b·∫°i, th·ª±c hi·ªán c√°c h√†nh ƒë·ªông ƒëƒÉng xu·∫•t/kh√¥ng ƒë∆∞·ª£c ph√©p.
                this.handleLogout();
                // T·ª´ ch·ªëi v·ªõi m·ªôt l·ªói c·ª• th·ªÉ cho vi·ªác l√†m m·ªõi th·∫•t b·∫°i.
                return Promise.reject(new ApiClientError('Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401));
            } finally {
                this.refreshPromise = null;
            }
        } else {
            // N·∫øu kh√¥ng c√≥ tr√¨nh x·ª≠ l√Ω l√†m m·ªõi, ch·ªâ c·∫ßn ƒëƒÉng xu·∫•t.
            this.handleLogout();
        }

        // N·∫øu ƒë·∫øn ƒë√¢y, y√™u c·∫ßu kh√¥ng th·ªÉ ƒë∆∞·ª£c ph·ª•c h·ªìi, v√¨ v·∫≠y ch√∫ng ta t·ª´ ch·ªëi.
        // ∆Øu ti√™n th√¥ng b√°o l·ªói g·ªëc t·ª´ API n·∫øu c√≥, thay v√¨ lu√¥n d√πng m·ªôt th√¥ng b√°o c·ª©ng.
        // ƒêi·ªÅu n√†y linh ho·∫°t h∆°n cho c√°c tr∆∞·ªùng h·ª£p 401 kh√¥ng ph·∫£i do token h·∫øt h·∫°n (v√≠ d·ª•: token kh√¥ng h·ª£p l·ªá).
        return Promise.reject(this.createApiError(error));
    }

    /**
     * Th·ª±c thi logic ƒëƒÉng xu·∫•t b·∫±ng c√°ch x√≥a b·ªô nh·ªõ v√† g·ªçi callback onUnauthorized.
     */
    private handleLogout(): void {
        persistence.local.removeItem(STORAGE_KEYS.AUTH_TOKEN);
        this.options.onUnauthorized?.();
    }

    /**
     * Ph∆∞∆°ng th·ª©c y√™u c·∫ßu c·ªët l√µi v·ªõi logic th·ª≠ l·∫°i.
     * @template T - Ki·ªÉu d·ªØ li·ªáu ph·∫£n h·ªìi mong ƒë·ª£i.
     * @param config - C·∫•u h√¨nh y√™u c·∫ßu c·ªßa Axios.
     * @param retryCount - S·ªë l·∫ßn th·ª≠ l·∫°i hi·ªán t·∫°i.
     * @returns M·ªôt promise gi·∫£i quy·∫øt v·ªõi d·ªØ li·ªáu ph·∫£n h·ªìi.
     */
    private async request<T>(config: AxiosRequestConfig, retryCount = 0): Promise<T> {
        try {
            const res = await this.instance.request<T>(config);
            return res.data;
        } catch (err: unknown) {
            // Interceptor x·ª≠ l√Ω h·∫ßu h·∫øt c√°c l·ªói, nh∆∞ng kh·ªëi catch n√†y x·ª≠ l√Ω c√°c l·∫ßn th·ª≠ l·∫°i v√† c√°c l·ªói kh√¥ng ph·∫£i c·ªßa Axios.
            const isAxios = axios.isAxiosError(err);
            const status = isAxios ? err.response?.status : undefined;

            const canRetry =
                retryCount < this.options.retryAttempts &&
                status !== 401 && // L·ªói 401 ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi interceptor, kh√¥ng c·∫ßn th·ª≠ l·∫°i ·ªü ƒë√¢y.
                (!isAxios || this.isRetryableError(err));

            if (canRetry) {
                const delayMs = this.options.retryDelay * Math.pow(2, retryCount);
                if (this.options.enableLogging) {
                    console.warn(`‚è≥ ƒêang th·ª≠ l·∫°i y√™u c·∫ßu... (${retryCount + 1}/${this.options.retryAttempts}) trong ${delayMs}ms`);
                }
                await new Promise((r) => setTimeout(r, delayMs));
                return this.request<T>(config, retryCount + 1);
            }

            // N·∫øu l·ªói kh√¥ng th·ªÉ th·ª≠ l·∫°i, n√©m l·∫°i n√≥.
            // N·∫øu ƒë√≥ l√† AxiosError, n√≥ ƒë√°ng l·∫Ω ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi b·ªüi interceptor.
            // N·∫øu kh√¥ng, ch√∫ng ta chuy·ªÉn ƒë·ªïi n√≥ ngay b√¢y gi·ªù.
            if (isAxios && !(err instanceof ApiClientError)) {
                throw this.createApiError(err as AxiosError<IApiErrorPayload>);
            }
            throw err;
        }
    }

    // --- C√°c ph∆∞∆°ng th·ª©c API c√¥ng khai ---

    public get<T>(endpoint: string, config?: Omit<AxiosRequestConfig, 'url' | 'method'>): Promise<T> {
        return this.request<T>({ url: endpoint, method: 'GET', ...config });
    }

    public post<T, D = unknown>(endpoint: string, data?: D, config?: Omit<AxiosRequestConfig, 'url' | 'method' | 'data'>): Promise<T> {
        return this.request<T>({ url: endpoint, method: 'POST', data, ...config });
    }

    public put<T, D = unknown>(endpoint: string, data?: D, config?: Omit<AxiosRequestConfig, 'url' | 'method' | 'data'>): Promise<T> {
        return this.request<T>({ url: endpoint, method: 'PUT', data, ...config });
    }

    public patch<T, D = unknown>(endpoint: string, data?: D, config?: Omit<AxiosRequestConfig, 'url' | 'method' | 'data'>): Promise<T> {
        return this.request<T>({ url: endpoint, method: 'PATCH', data, ...config });
    }

    public delete<T>(endpoint: string, config?: Omit<AxiosRequestConfig, 'url' | 'method'>): Promise<T> {
        return this.request<T>({ url: endpoint, method: 'DELETE', ...config });
    }

    /**
     * Th·ª±c hi·ªán t·∫£i l√™n t·ªáp b·∫±ng FormData.
     * @template T - Ki·ªÉu d·ªØ li·ªáu ph·∫£n h·ªìi mong ƒë·ª£i.
     * @param endpoint - URL ƒëi·ªÉm cu·ªëi ƒë·ªÉ t·∫£i l√™n.
     * @param formData - ƒê·ªëi t∆∞·ª£ng FormData ch·ª©a (c√°c) t·ªáp v√† d·ªØ li·ªáu kh√°c.
     * @param onProgress - M·ªôt callback t√πy ch·ªçn ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh t·∫£i l√™n (0-100).
     * @param signal - M·ªôt AbortSignal t√πy ch·ªçn ƒë·ªÉ h·ªßy y√™u c·∫ßu.
     * @returns M·ªôt promise gi·∫£i quy·∫øt v·ªõi d·ªØ li·ªáu ph·∫£n h·ªìi.
     */
    public async upload<T>(
        endpoint: string,
        formData: FormData,
        onProgress?: (progressPercent: number) => void,
        signal?: AbortSignal
    ): Promise<T> {
        return this.request<T>({
            url: endpoint,
            method: 'POST',
            data: formData,
            headers: new AxiosHeaders({ 'Content-Type': 'multipart/form-data' }),
            onUploadProgress: (pe: AxiosProgressEvent) => {
                if (onProgress && pe.total) {
                    const percent = Math.round((pe.loaded * 100) / pe.total);
                    onProgress(percent);
                }
            },
            signal,
        });
    }

    // --- Ti·ªán √≠ch v√† H√†m tr·ª£ gi√∫p ---

    /**
     * G·ª° b·ªè c√°c interceptor ƒë·ªÉ d·ªçn d·∫πp th·ª±c th·ªÉ. H·ªØu √≠ch cho vi·ªác ki·ªÉm th·ª≠ ho·∫∑c c√°c m√¥i tr∆∞·ªùng ƒë·ªông.
     */
    public destroy(): void {
        if (this.requestInterceptorId !== undefined) {
            this.instance.interceptors.request.eject(this.requestInterceptorId);
        }
        if (this.responseInterceptorId !== undefined) {
            this.instance.interceptors.response.eject(this.responseInterceptorId);
        }
    }

    /**
     * ƒê·∫∑t header 'Authorization' v√†o c·∫•u h√¨nh y√™u c·∫ßu c·ªßa Axios.
     */
    private setAuthHeader(config: AxiosRequestConfig, token: string): void {
        const headers = new AxiosHeaders(config.headers);
        headers.set('Authorization', `Bearer ${token}`);
        config.headers = headers;
    }

    /**
     * X√°c ƒë·ªãnh xem m·ªôt l·ªói Axios c√≥ th·ªÉ th·ª≠ l·∫°i ƒë∆∞·ª£c hay kh√¥ng (l·ªói m·∫°ng ho·∫∑c l·ªói m√°y ch·ªß 5xx).
     */
    private isRetryableError(err: AxiosError): boolean {
        const status = err.response?.status;
        return !status || (status >= 500 && status < 600);
    }

    /**
     * T·∫°o m·ªôt ApiClientError ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a t·ª´ m·ªôt AxiosError.
     * @param axError - AxiosError ngu·ªìn.
     * @param overrideMessage - M·ªôt th√¥ng b√°o t√πy ch·ªçn ƒë·ªÉ s·ª≠ d·ª•ng thay v√¨ th√¥ng b√°o t·ª´ API.
     * @returns M·ªôt th·ª±c th·ªÉ c·ªßa ApiClientError.
     */
    private createApiError(axError: AxiosError<IApiErrorPayload>, overrideMessage?: string): ApiClientError<IApiErrorPayload> {
        const res = axError.response;
        const apiMessage = res?.data?.message ?? res?.data?.error;
        const message = overrideMessage
            ?? apiMessage
            ?? `L·ªói API: ${res?.status ?? 'Kh√¥ng x√°c ƒë·ªãnh'} ${res?.statusText ?? axError.message}`;

        return new ApiClientError<IApiErrorPayload>(message, res?.status, res?.statusText, res?.data);
    }
}

export default ApiClient;

